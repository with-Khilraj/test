{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nconst api = axios.create({\n  baseURL: \"http://localhost:5000\",\n  withCredentials: true // send cookies with requests\n});\n\n// Function to clear storage and redirect to login\n\n// Intercept requests to refresh token if access token expires\napi.interceptors.request.use(async config => {\n  const accessToken = localStorage.getItem(\"accessToken\");\n  if (accessToken) {\n    config.headers.Authorization = `Bearer ${accessToken}`;\n  }\n  return config;\n});\n_s(api.interceptors.response.use(response => {\n  console.log(\"API Response:\", response);\n  return response;\n}, _s(async error => {\n  var _error$response;\n  _s();\n  const navigate = useNavigate();\n  console.log(\"API Error:\", error.response);\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 403 && error.response.data.error === \"Unauthorized\") {\n    try {\n      const refreshResponse = await axios.post(\"http://localhost:5000/api/refresh\", {}, {\n        withCredentials: true\n      });\n      const newAccessToken = refreshResponse.data.accessToken;\n      console.log(newAccessToken);\n      localStorage.setItem('accessToken', newAccessToken);\n\n      // store the new access token and retry the original request with the new access token\n      error.config.headers[\"Authorization\"] = `Bearer ${newAccessToken}`;\n      // return api.request(error.config);\n      return axios(error.config); // updated\n    } catch (refreshError) {\n      console.error(\"Failed to refresh token:\", refreshError);\n      // Handle logout or redirect to the login page\n      localStorage.removeItem('accessToken');\n      navigate('/login');\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n}, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n})), \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\nexport default api;","map":{"version":3,"names":["axios","useNavigate","api","create","baseURL","withCredentials","interceptors","request","use","config","accessToken","localStorage","getItem","headers","Authorization","_s","response","console","log","error","_error$response","navigate","status","data","refreshResponse","post","newAccessToken","setItem","refreshError","removeItem","Promise","reject"],"sources":["C:/Users/acer/Desktop/D-Documents/The Journey/Learn Node js/mern-project/client/src/Api.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst api = axios.create({\r\n  baseURL: \"http://localhost:5000\",\r\n  withCredentials: true, // send cookies with requests\r\n});\r\n\r\n// Function to clear storage and redirect to login\r\n\r\n// Intercept requests to refresh token if access token expires\r\napi.interceptors.request.use( async (config) => {\r\n  const accessToken = localStorage.getItem(\"accessToken\");\r\n  if (accessToken) {\r\n    config.headers.Authorization = `Bearer ${accessToken}`;\r\n  }\r\n  return config;\r\n});\r\n\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log(\"API Response:\", response);\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    const navigate = useNavigate();\r\n    console.log(\"API Error:\", error.response);\r\n    if (\r\n      error.response?.status === 403 &&\r\n      error.response.data.error === \"Unauthorized\"\r\n    ) {\r\n      try {\r\n        const refreshResponse = await axios.post(\r\n          \"http://localhost:5000/api/refresh\",\r\n          {},\r\n          { withCredentials: true }\r\n        );\r\n        const newAccessToken = refreshResponse.data.accessToken;\r\n        console.log(newAccessToken);\r\n\r\n        localStorage.setItem('accessToken', newAccessToken);\r\n\r\n        // store the new access token and retry the original request with the new access token\r\n        error.config.headers[\"Authorization\"] = `Bearer ${newAccessToken}`;\r\n        // return api.request(error.config);\r\n        return axios(error.config);  // updated\r\n      } catch (refreshError) {\r\n        console.error(\"Failed to refresh token:\",refreshError);\r\n        // Handle logout or redirect to the login page\r\n        localStorage.removeItem('accessToken')\r\n        navigate('/login');\r\n        return Promise.reject(refreshError);\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAE,uBAAuB;EAChCC,eAAe,EAAE,IAAI,CAAE;AACzB,CAAC,CAAC;;AAEF;;AAEA;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAE,MAAOC,MAAM,IAAK;EAC9C,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EACvD,IAAIF,WAAW,EAAE;IACfD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,WAAW,EAAE;EACxD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEFM,EAAA,CAAAb,GAAG,CAACI,YAAY,CAACU,QAAQ,CAACR,GAAG,CAC1BQ,QAAQ,IAAK;EACZC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,QAAQ,CAAC;EACtC,OAAOA,QAAQ;AACjB,CAAC,EAAAD,EAAA,CACD,MAAOI,KAAK,IAAK;EAAA,IAAAC,eAAA;EAAAL,EAAA;EACf,MAAMM,QAAQ,GAAGpB,WAAW,CAAC,CAAC;EAC9BgB,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEC,KAAK,CAACH,QAAQ,CAAC;EACzC,IACE,EAAAI,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,IAC9BH,KAAK,CAACH,QAAQ,CAACO,IAAI,CAACJ,KAAK,KAAK,cAAc,EAC5C;IACA,IAAI;MACF,MAAMK,eAAe,GAAG,MAAMxB,KAAK,CAACyB,IAAI,CACtC,mCAAmC,EACnC,CAAC,CAAC,EACF;QAAEpB,eAAe,EAAE;MAAK,CAC1B,CAAC;MACD,MAAMqB,cAAc,GAAGF,eAAe,CAACD,IAAI,CAACb,WAAW;MACvDO,OAAO,CAACC,GAAG,CAACQ,cAAc,CAAC;MAE3Bf,YAAY,CAACgB,OAAO,CAAC,aAAa,EAAED,cAAc,CAAC;;MAEnD;MACAP,KAAK,CAACV,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUa,cAAc,EAAE;MAClE;MACA,OAAO1B,KAAK,CAACmB,KAAK,CAACV,MAAM,CAAC,CAAC,CAAE;IAC/B,CAAC,CAAC,OAAOmB,YAAY,EAAE;MACrBX,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAACS,YAAY,CAAC;MACtD;MACAjB,YAAY,CAACkB,UAAU,CAAC,aAAa,CAAC;MACtCR,QAAQ,CAAC,QAAQ,CAAC;MAClB,OAAOS,OAAO,CAACC,MAAM,CAACH,YAAY,CAAC;IACrC;EACF;EACA,OAAOE,OAAO,CAACC,MAAM,CAACZ,KAAK,CAAC;AAC9B,CAAC;EAAA,QA9BkBlB,WAAW;AAAA,EA+BhC,CAAC;EAAA,QA/BoBA,WAAW;AAAA;AAiChC,eAAeC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}