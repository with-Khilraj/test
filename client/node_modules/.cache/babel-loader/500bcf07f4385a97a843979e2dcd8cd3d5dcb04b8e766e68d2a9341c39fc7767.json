{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acer\\\\Desktop\\\\D-Documents\\\\The Journey\\\\Learn Node js\\\\mern-project\\\\client\\\\src\\\\component\\\\chatContainer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport api from \"../Api\";\nimport moment from \"moment\";\nimport \"../styles/chatContainer.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:5000\"); // this is basically backend url\n\nconst ChatContainer = ({\n  selectedUser,\n  currentUser\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const messageEndRef = useRef(null);\n  useEffect(() => {\n    if (selectedUser) {\n      // Join a chat room\n      const roomId = [currentUser._id, selectedUser._id].sort().join(\"-\");\n      socket.emit(\"join-room\", roomId);\n      const fetchChatHistory = async () => {\n        try {\n          const accessToken = localStorage.getItem(\"accessToken\");\n          const response = await api.get(`/api/messages/${selectedUser._id}`, {\n            headers: {\n              Authorization: `Bearer ${accessToken}`\n            }\n          });\n          setMessages(response.data.messages);\n        } catch (error) {\n          console.error(\"Error fetching chat history:\", error);\n        }\n      };\n      fetchChatHistory();\n      const handleReceiveMessage = data => {\n        setMessages(prevMessages => {\n          if (!prevMessages.find(msg => msg._id === data._id)) {\n            return [...prevMessages, data];\n          }\n          return prevMessages;\n        });\n      };\n      socket.on(\"receive-message\", handleReceiveMessage);\n\n      // return () => {\n      //   socket.off(\"receive-message\", handleReceiveMessage);\n      // };\n\n      // // listen for new messages\n      // socket.on(\"receive-message\", (data) => {\n      //   // only add the message if it's not already in the state\n      //   if(!messages.find((msg) => msg._id === data._id)) {\n      //   setMessages((prevMessages) => [...prevMessages, data]);\n      //   };\n      //   // setMessages((prevMessages) => [...prevMessages, data]);\n      // });\n    }\n  }, [selectedUser, currentUser]);\n\n  // Handle send message button\n  const handleSendMessage = async () => {\n    if (!newMessage.trim()) return;\n    const messageData = {\n      roomId: [currentUser._id, selectedUser._id].sort().join(\"-\"),\n      senderId: currentUser._id,\n      receiverId: selectedUser._id,\n      content: newMessage\n    };\n    try {\n      // Emit message via socket.io\n      socket.emit(\"send-message\", messageData);\n\n      // save the message to the database\n      const accessToken = localStorage.getItem(\"accessToken\");\n      const response = await api.post(\"/api/messages/\", messageData, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n\n      // Add the message locally iif it's not already present\n      setMessages(prevMessages => {\n        if (!prevMessages.find(msg => msg._id === response.data._id)) {\n          return [...prevMessages, response.data];\n        }\n        return prevMessages;\n      });\n      // setMessages((prevMessages) => [...prevMessages, messageData]);\n      setNewMessage(\"\");\n    } catch (error) {\n      console.error(\"Errro while sending message:\", error);\n    }\n  };\n  useEffect(() => {\n    var _messageEndRef$curren;\n    (_messageEndRef$curren = messageEndRef.current) === null || _messageEndRef$curren === void 0 ? void 0 : _messageEndRef$curren.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n\n  // Helper: check if there's a 30 minute or more gap between two messages\n  const shouldDisplayTimeStamp = (currentMessage, previousMessage) => {\n    if (!previousMessage) return true;\n    const currentTime = moment(currentMessage.createdAt);\n    const previousTime = moment(previousMessage.createdAt);\n    return currentTime.diff(previousTime, \"minutes\") >= 30;\n  };\n  if (!selectedUser) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"unselected-chat\",\n      children: \"Select a user to start chatting!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-avatar\",\n        children: selectedUser.avatar ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: selectedUser.avatar,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: selectedUser.username.charAt(0).toUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"chat-username\",\n        children: selectedUser.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map((message, index) => {\n        const isCurrentUser = message.senderId === currentUser._id;\n        const senderUser = isCurrentUser ? currentUser : selectedUser;\n        const previousMessage = messages[index - 1];\n        const showTimeStamp = shouldDisplayTimeStamp(message, previousMessage);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [showTimeStamp && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-timestamp\",\n            children: moment(message.createdAt).format(\"D MMM YYYY, HH:mm\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"avatar-content\",\n            children: !isCurrentUser && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-avatar\",\n              children: senderUser.avatar ? /*#__PURE__*/_jsxDEV(\"img\", {\n                src: senderUser.avatar,\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"message-initial\",\n                children: senderUser.username.charAt(0).toUpperCase()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${message.senderId === currentUser._id ? \"sent\" : \"received\"}`,\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: message.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messageEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatContainer, \"eL5yL9ps1BlAybqgeHMK/NGsOSM=\");\n_c = ChatContainer;\nexport default ChatContainer;\nvar _c;\n$RefreshReg$(_c, \"ChatContainer\");","map":{"version":3,"names":["React","useEffect","useRef","useState","io","api","moment","jsxDEV","_jsxDEV","socket","ChatContainer","selectedUser","currentUser","_s","messages","setMessages","newMessage","setNewMessage","messageEndRef","roomId","_id","sort","join","emit","fetchChatHistory","accessToken","localStorage","getItem","response","get","headers","Authorization","data","error","console","handleReceiveMessage","prevMessages","find","msg","on","handleSendMessage","trim","messageData","senderId","receiverId","content","post","_messageEndRef$curren","current","scrollIntoView","behavior","shouldDisplayTimeStamp","currentMessage","previousMessage","currentTime","createdAt","previousTime","diff","className","children","fileName","_jsxFileName","lineNumber","columnNumber","avatar","src","alt","username","charAt","toUpperCase","map","message","index","isCurrentUser","senderUser","showTimeStamp","format","ref","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/acer/Desktop/D-Documents/The Journey/Learn Node js/mern-project/client/src/component/chatContainer.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\nimport api from \"../Api\";\r\nimport moment from \"moment\";\r\n\r\nimport \"../styles/chatContainer.css\";\r\n\r\nconst socket = io(\"http://localhost:5000\"); // this is basically backend url\r\n\r\nconst ChatContainer = ({ selectedUser, currentUser }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const messageEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (selectedUser) {\r\n      // Join a chat room\r\n      const roomId = [currentUser._id, selectedUser._id].sort().join(\"-\");\r\n      socket.emit(\"join-room\", roomId);\r\n\r\n      const fetchChatHistory = async () => {\r\n        try {\r\n          const accessToken = localStorage.getItem(\"accessToken\");\r\n          const response = await api.get(`/api/messages/${selectedUser._id}`, {\r\n            headers: {\r\n              Authorization: `Bearer ${accessToken}`,\r\n            },\r\n          });\r\n          setMessages(response.data.messages);\r\n        } catch (error) {\r\n          console.error(\"Error fetching chat history:\", error);\r\n        }\r\n      };\r\n      fetchChatHistory();\r\n\r\n      const handleReceiveMessage = (data) => {\r\n        setMessages((prevMessages) => {\r\n          if (!prevMessages.find((msg) => msg._id === data._id)) {\r\n            return [...prevMessages, data];\r\n          }\r\n          return prevMessages;\r\n        });\r\n      };\r\n\r\n      socket.on(\"receive-message\", handleReceiveMessage);\r\n\r\n      // return () => {\r\n      //   socket.off(\"receive-message\", handleReceiveMessage);\r\n      // };\r\n\r\n      // // listen for new messages\r\n      // socket.on(\"receive-message\", (data) => {\r\n      //   // only add the message if it's not already in the state\r\n      //   if(!messages.find((msg) => msg._id === data._id)) {\r\n      //   setMessages((prevMessages) => [...prevMessages, data]);\r\n      //   };\r\n      //   // setMessages((prevMessages) => [...prevMessages, data]);\r\n      // });\r\n    }\r\n  }, [selectedUser, currentUser]);\r\n\r\n  // Handle send message button\r\n  const handleSendMessage = async () => {\r\n    if (!newMessage.trim()) return;\r\n\r\n    const messageData = {\r\n      roomId: [currentUser._id, selectedUser._id].sort().join(\"-\"),\r\n      senderId: currentUser._id,\r\n      receiverId: selectedUser._id,\r\n      content: newMessage,\r\n    };\r\n\r\n    try {\r\n      // Emit message via socket.io\r\n      socket.emit(\"send-message\", messageData);\r\n\r\n      // save the message to the database\r\n      const accessToken = localStorage.getItem(\"accessToken\");\r\n      const response = await api.post(\"/api/messages/\", messageData, {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n      });\r\n\r\n      // Add the message locally iif it's not already present\r\n      setMessages((prevMessages) => {\r\n        if (!prevMessages.find((msg) => msg._id === response.data._id)) {\r\n          return [...prevMessages, response.data];\r\n        }\r\n        return prevMessages;\r\n      });\r\n      // setMessages((prevMessages) => [...prevMessages, messageData]);\r\n      setNewMessage(\"\");\r\n    } catch (error) {\r\n      console.error(\"Errro while sending message:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    messageEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  // Helper: check if there's a 30 minute or more gap between two messages\r\n  const shouldDisplayTimeStamp = (currentMessage, previousMessage) => {\r\n    if (!previousMessage) return true;\r\n\r\n    const currentTime = moment(currentMessage.createdAt);\r\n    const previousTime = moment(previousMessage.createdAt);\r\n    return currentTime.diff(previousTime, \"minutes\") >= 30;\r\n  };\r\n\r\n  if (!selectedUser) {\r\n    return (\r\n      <div className=\"unselected-chat\">Select a user to start chatting!</div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"chat-header\">\r\n        <div className=\"chat-avatar\">\r\n          {selectedUser.avatar ? (\r\n            <img src={selectedUser.avatar} alt=\"\" />\r\n          ) : (\r\n            <span>{selectedUser.username.charAt(0).toUpperCase()}</span>\r\n          )}\r\n        </div>\r\n        <h3 className=\"chat-username\">{selectedUser.username}</h3>\r\n      </div>\r\n\r\n      <div className=\"chat-messages\">\r\n        {messages.map((message, index) => {\r\n          const isCurrentUser = message.senderId === currentUser._id;\r\n          const senderUser = isCurrentUser ? currentUser : selectedUser;\r\n          const previousMessage = messages[index - 1];\r\n          const showTimeStamp = shouldDisplayTimeStamp(\r\n            message,\r\n            previousMessage\r\n          );\r\n\r\n          return (\r\n            <div key={index}>\r\n              {/* show timestamp if necessary */}\r\n              {showTimeStamp && (\r\n                <div className=\"message-timestamp\">\r\n                  {moment(message.createdAt).format(\"D MMM YYYY, HH:mm\")}\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"avatar-content\">\r\n                {/* Avatar or Initial char of username */}\r\n                {!isCurrentUser && (\r\n                  <div className=\"message-avatar\">\r\n                    {senderUser.avatar ? (\r\n                      <img src={senderUser.avatar} alt=\"\" />\r\n                    ) : (\r\n                      <span className=\"message-initial\">\r\n                        {senderUser.username.charAt(0).toUpperCase()}\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </div>\r\n              \r\n                {/* Message bubble */}\r\n                <div\r\n                  className={`message ${\r\n                    message.senderId === currentUser._id ? \"sent\" : \"received\"\r\n                  }`}\r\n                >\r\n                  <p>{message.content}</p>\r\n                </div>\r\n                <div ref={messageEndRef}></div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {/* <div className=\"chat-messages\">\r\n        {messages.map((message, index) => (\r\n          <div\r\n            key={message._id}\r\n            className={`message ${\r\n              message.senderId === currentUser._id ? \"sent\" : \"received\"\r\n            }`}\r\n          >\r\n            <p>{message.content}</p>\r\n          </div>\r\n        ))}\r\n      </div> */}\r\n\r\n      {/* message input */}\r\n      <div className=\"chat-input\">\r\n        <input\r\n          type=\"text\"\r\n          value={newMessage}\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n        />\r\n        <button onClick={handleSendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatContainer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}