{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acer\\\\Desktop\\\\D-Documents\\\\The Journey\\\\Learn Node js\\\\mern-project\\\\client\\\\src\\\\component\\\\chatContainer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport api from \"../Api\";\nimport { useNavigate } from \"react-router-dom\";\nimport moment from \"moment\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"../styles/chatContainer.css\";\nimport socket from \"./socket\";\nimport { useOnlineUsers } from \"../context/onlineUsersContext\";\nimport audio_call from \"../assets/call.png\";\nimport video_call from \"../assets/video-camera.png\";\nimport info_icon from \"../assets/info.png\";\nimport audio_icon from \"../assets/mic.png\";\nimport media_icon from \"../assets/image-gallery.png\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatContainer = ({\n  selectedUser,\n  currentUser\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [file, setFile] = useState(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const [isRecording, setIsRecording] = useState(false);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [audioChunk, setAudioChunk] = useState([]);\n  const [error, setError] = useState(\"\");\n  const messageEndRef = useRef(null);\n  const fileInputRef = useRef(null);\n  const onlineUsers = useOnlineUsers();\n  useEffect(() => {\n    if (selectedUser) {\n      const roomId = [currentUser._id, selectedUser._id].sort().join(\"-\");\n      socket.emit(\"join-room\", roomId);\n      const fetchChatHistory = async () => {\n        try {\n          const accessToken = localStorage.getItem(\"accessToken\");\n          const response = await api.get(`/api/messages/${selectedUser._id}`, {\n            headers: {\n              Authorization: `Bearer ${accessToken}`\n            }\n          });\n          setMessages(response.data.messages);\n        } catch (error) {\n          console.error(\"Error fetching chat history:\", error);\n        }\n      };\n      fetchChatHistory();\n\n      // fetch chat history\n      const handleReceiveMessage = data => {\n        console.log(\"New message received::\", data);\n        setMessages(prevMessages => {\n          // console.log(\"Previous Message:::\", prevMessages);\n          if (!prevMessages.some(msg => msg._id === data._id)) {\n            const updateMessages = [...prevMessages, data];\n            console.log(\"Updated messages:::\", updateMessages);\n            return updateMessages;\n          }\n          return prevMessages;\n        });\n      };\n      socket.on(\"receive-message\", handleReceiveMessage);\n      return () => {\n        socket.off(\"receive-message\", handleReceiveMessage);\n      };\n    }\n  }, [selectedUser, currentUser]);\n\n  // hande file input change\n  const handleFileInputChange = e => {\n    const selectedFile = e.target.files[0];\n    if (selectedFile) {\n      setFile(selectedFile);\n      handleSendMessage(selectedFile);\n    } else {\n      setFile(null);\n    }\n  };\n\n  // Trigger file input when an icon is clicked\n  const handleMediaClick = type => {\n    fileInputRef.current.click();\n  };\n\n  // handle audio recording\n  const handleAudioRecording = async () => {\n    if (!isRecording) {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        const recorder = new MediaRecorder(stream);\n        setMediaRecorder(recorder);\n        recorder.ondataavailable = e => {\n          setAudioChunk(prev => [...prev, e.data]);\n        };\n        recorder.onstop = async () => {\n          const audioBlob = new Blob(audioChunk, {\n            type: \"audio/wav\"\n          });\n          setFile(audioBlob);\n          handleSendMessage(audioBlob);\n          setAudioChunk([]);\n        };\n        recorder.start();\n        setIsRecording(true);\n      } catch (e) {\n        console.error(\"Error starting audio recording:\", e);\n      }\n    } else {\n      mediaRecorder.stop();\n      setIsRecording(false);\n    }\n  };\n  const isValidObjectId = id => {\n    return /^[0-9a-fA-F]{24}$/.test(id);\n  };\n\n  // Handle send message button\n  // const handleSendMessage = async () => {\n  //   if (!newMessage.trim()) return;\n\n  //   const messageId = uuidv4();\n  //   const messageData = {\n  //     _id: messageId,\n  //     roomId: [currentUser._id, selectedUser._id].sort().join(\"-\"),\n  //     senderId: currentUser._id,\n  //     receiverId: selectedUser._id,\n  //     content: newMessage,\n  //   };\n\n  //   try {\n  //     setMessages((prevMessages) => [...prevMessages, messageData]); // Optimistic update\n  //     setNewMessage(\"\");\n\n  //     socket.emit(\"send-message\", messageData);\n\n  //     const accessToken = localStorage.getItem(\"accessToken\");\n  //     const response = await api.post(\"/api/messages/\", messageData, {\n  //       headers: {\n  //         Authorization: `Bearer ${accessToken}`,\n  //       },\n  //     });\n\n  //     // Update message with actual ID from server response\n  //     setMessages((prevMessages) =>\n  //       prevMessages.map((msg) =>\n  //         msg._id === Date.now() ? { ...msg, _id: response.data._id } : msg\n  //       )\n  //     );\n  //   } catch (error) {\n  //     console.error(\"Error while sending message:\", error);\n  //   }\n  // };\n\n  const handleSendMessage = async (fileToSend = file) => {\n    if (!newMessage.trim() && !fileToSend) return;\n\n    // Validate receiverId\n    if (!(selectedUser !== null && selectedUser !== void 0 && selectedUser._id) || !isValidObjectId(selectedUser._id)) {\n      setError(\"Invalid receiver ID. Please select a valid user.\");\n      return;\n    }\n    const messageId = uuidv4();\n\n    // Determine messageType based on whether a file is being sent\n    let messageType = \"text\"; // Default to text message\n    if (fileToSend && fileToSend instanceof File) {\n      if (fileToSend.type.startsWith(\"audio\")) {\n        messageType = \"audio\";\n      } else if (fileToSend.type.startsWith(\"video\")) {\n        messageType = \"video\";\n      } else if (fileToSend.type.startsWith(\"image\")) {\n        messageType = \"photo\";\n      } else {\n        messageType = \"file\";\n      }\n    }\n    const messageData = {\n      _id: messageId,\n      roomId: [currentUser._id, selectedUser._id].sort().join(\"-\"),\n      senderId: currentUser._id,\n      receiverId: selectedUser._id,\n      content: newMessage.trim(),\n      messageType,\n      fileUrl: fileToSend && fileToSend instanceof Blob ? URL.createObjectURL(fileToSend) : null,\n      // Temporary URL for preview\n      fileName: fileToSend ? fileToSend.name : \"\",\n      fileSize: fileToSend ? fileToSend.size : 0,\n      fileType: fileToSend ? fileToSend.type : \"\",\n      duration: messageType === \"audio\" || messageType === \"video\" ? await getMediaDuration(fileToSend) : 0,\n      // Calculate duration for audio/video files\n      status: \"sent\"\n    };\n    console.log(\"Constructed MesssageDate::::::\", messageData);\n    try {\n      setIsUploading(true);\n      setMessages(prevMessages => [...prevMessages, messageData]); // Optimistic update\n      setNewMessage(\"\");\n      setFile(null);\n      socket.emit(\"send-message\", messageData);\n      const accessToken = localStorage.getItem(\"accessToken\");\n      const formData = new FormData();\n\n      // Append only required fields to FormData\n      formData.append(\"roomId\", messageData.roomId);\n      formData.append(\"senderId\", messageData.senderId);\n      formData.append(\"receiverId\", messageData.receiverId); // Explicitly append receiverId\n      formData.append(\"content\", messageData.content);\n      formData.append(\"messageType\", messageData.messageType);\n      formData.append(\"caption\", messageData.caption);\n      formData.append(\"status\", messageData.status);\n      if (fileToSend && fileToSend instanceof File) {\n        formData.append(\"file\", fileToSend);\n        formData.append(\"fileName\", messageData.fileName);\n        formData.append(\"fileSize\", messageData.fileSize);\n        formData.append(\"fileType\", messageData.fileType);\n        if (messageData.duration) formData.append(\"duration\", messageData.duration);\n      }\n\n      // Send message to server\n      const response = await api.post(\"/api/messages/\", formData, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n\n      // Update message with actual ID from server response\n      setMessages(prevMessages => prevMessages.map(msg =>\n      // msg._id === Date.now() ? { ...msg, _id: response.data._id } : msg\n      msg._id === messageId ? {\n        ...msg,\n        _id: response.data._id\n      } : msg));\n    } catch (error) {\n      var _error$response;\n      console.error(\"Error while sending message:\", error);\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        navigate('/login');\n      }\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  // Get duration of audio/video files\n  const getMediaDuration = file => {\n    return new Promise(resolve => {\n      const media = document.createElement(file.type.startsWith(\"audio\") ? \"audio\" : \"video\");\n      media.src = URL.createObjectURL(file);\n      media.onloadedmetadata = () => {\n        resolve(media.duration);\n      };\n    });\n  };\n\n  // Helper function to generate a thumbnail (for photo and video)\n  // const generateThumbnail = (file) => {\n  //   return new Promise((resolve) => {\n  //     if (file.type.startsWith === \"image\") {\n  //       resolve(URL.createObjectURL(file)); // Use the image itself as the thumbnail\n  //     } else if (file.type.startsWith === \"video\") {\n  //       const video = document.createElement(\"video\");\n  //       video.src = URL.createObjectURL(file);\n  //       video.onloadeddata = () => {\n  //         const canvas = document.createElement(\"canvas\");\n  //         canvas.width = video.videoWidth;\n  //         canvas.height = video.videoHeight;\n  //         canvas.getContext(\"2d\").drawImage(video, 0, 0, canvas.width, canvas.height);\n  //         resolve(canvas.toDataURL(\"image/jpeg\"));\n  //       };\n  //     }\n  //   });\n  // };\n\n  useEffect(() => {\n    if (messages.length) {\n      var _messageEndRef$curren;\n      (_messageEndRef$curren = messageEndRef.current) === null || _messageEndRef$curren === void 0 ? void 0 : _messageEndRef$curren.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  }, [messages]);\n\n  // Helper: check if there's a 30 minute or more gap between two messages\n  const shouldDisplayTimeStamp = (currentMessage, previousMessage) => {\n    if (!previousMessage) return true;\n    const currentTime = moment(currentMessage.createdAt);\n    const previousTime = moment(previousMessage.createdAt);\n    return currentTime.diff(previousTime, \"minutes\") >= 30;\n  };\n\n  // Helper: check if a message should start a new group\n  const shouldStartNewGroup = (currentMessage, previousMessage) => {\n    if (!previousMessage) return true;\n    const currentTime = moment(currentMessage.createdAt);\n    const previousTime = moment(previousMessage.createdAt);\n    return currentMessage.senderId !== previousMessage.senderId || currentTime.diff(previousTime, \"minutes\") >= 1;\n  };\n  if (!selectedUser) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"unselected-chat\",\n      children: \"Select a user to start chatting!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(ChatContainer, \"6LCN9R0/WYKJ3ZDpVjgkKzVIIQM=\", false, function () {\n  return [useNavigate, useOnlineUsers];\n});\n_c = ChatContainer;\nexport default ChatContainer;\nvar _c;\n$RefreshReg$(_c, \"ChatContainer\");","map":{"version":3,"names":["React","useEffect","useRef","useState","api","useNavigate","moment","v4","uuidv4","socket","useOnlineUsers","audio_call","video_call","info_icon","audio_icon","media_icon","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatContainer","selectedUser","currentUser","_s","navigate","messages","setMessages","newMessage","setNewMessage","file","setFile","isUploading","setIsUploading","isRecording","setIsRecording","mediaRecorder","setMediaRecorder","audioChunk","setAudioChunk","error","setError","messageEndRef","fileInputRef","onlineUsers","roomId","_id","sort","join","emit","fetchChatHistory","accessToken","localStorage","getItem","response","get","headers","Authorization","data","console","handleReceiveMessage","log","prevMessages","some","msg","updateMessages","on","off","handleFileInputChange","e","selectedFile","target","files","handleSendMessage","handleMediaClick","type","current","click","handleAudioRecording","stream","navigator","mediaDevices","getUserMedia","audio","recorder","MediaRecorder","ondataavailable","prev","onstop","audioBlob","Blob","start","stop","isValidObjectId","id","test","fileToSend","trim","messageId","messageType","File","startsWith","messageData","senderId","receiverId","content","fileUrl","URL","createObjectURL","fileName","name","fileSize","size","fileType","duration","getMediaDuration","status","formData","FormData","append","caption","post","map","_error$response","Promise","resolve","media","document","createElement","src","onloadedmetadata","length","_messageEndRef$curren","scrollIntoView","behavior","shouldDisplayTimeStamp","currentMessage","previousMessage","currentTime","createdAt","previousTime","diff","shouldStartNewGroup","className","children","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/acer/Desktop/D-Documents/The Journey/Learn Node js/mern-project/client/src/component/chatContainer.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport api from \"../Api\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport \"../styles/chatContainer.css\";\r\nimport socket from \"./socket\";\r\nimport { useOnlineUsers } from \"../context/onlineUsersContext\";\r\nimport audio_call from \"../assets/call.png\";\r\nimport video_call from \"../assets/video-camera.png\";\r\nimport info_icon from \"../assets/info.png\";\r\nimport audio_icon from \"../assets/mic.png\";\r\nimport media_icon from \"../assets/image-gallery.png\";\r\n\r\nconst ChatContainer = ({ selectedUser, currentUser }) => {\r\n  const navigate = useNavigate();\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [file, setFile] = useState(null);\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [mediaRecorder, setMediaRecorder] = useState(null);\r\n  const [audioChunk, setAudioChunk] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n  const messageEndRef = useRef(null);\r\n  const fileInputRef = useRef(null);\r\n  const onlineUsers = useOnlineUsers();\r\n\r\n  useEffect(() => {\r\n    if (selectedUser) {\r\n      const roomId = [currentUser._id, selectedUser._id].sort().join(\"-\");\r\n      socket.emit(\"join-room\", roomId);\r\n\r\n      const fetchChatHistory = async () => {\r\n        try {\r\n          const accessToken = localStorage.getItem(\"accessToken\");\r\n          const response = await api.get(`/api/messages/${selectedUser._id}`, {\r\n            headers: {\r\n              Authorization: `Bearer ${accessToken}`,\r\n            },\r\n          });\r\n          setMessages(response.data.messages);\r\n        } catch (error) {\r\n          console.error(\"Error fetching chat history:\", error);\r\n        }\r\n      };\r\n      fetchChatHistory();\r\n\r\n      // fetch chat history\r\n      const handleReceiveMessage = (data) => {\r\n        console.log(\"New message received::\", data);\r\n\r\n        setMessages((prevMessages) => {\r\n          // console.log(\"Previous Message:::\", prevMessages);\r\n          if (!prevMessages.some((msg) => msg._id === data._id)) {\r\n            const updateMessages = [...prevMessages, data];\r\n            console.log(\"Updated messages:::\", updateMessages);\r\n            return updateMessages;\r\n          }\r\n          return prevMessages;\r\n        });\r\n      };\r\n\r\n      socket.on(\"receive-message\", handleReceiveMessage);\r\n\r\n      return () => {\r\n        socket.off(\"receive-message\", handleReceiveMessage);\r\n      };\r\n    }\r\n  }, [selectedUser, currentUser]);\r\n\r\n  // hande file input change\r\n  const handleFileInputChange = (e) => {\r\n    const selectedFile = e.target.files[0];\r\n    if (selectedFile) {\r\n      setFile(selectedFile);\r\n      handleSendMessage(selectedFile);\r\n    } else {\r\n      setFile(null);\r\n    }\r\n  };\r\n\r\n  // Trigger file input when an icon is clicked\r\n  const handleMediaClick = (type) => {\r\n    fileInputRef.current.click();\r\n  }\r\n\r\n  // handle audio recording\r\n  const handleAudioRecording = async () => {\r\n    if (!isRecording) {\r\n      try {\r\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n        const recorder = new MediaRecorder(stream);\r\n        setMediaRecorder(recorder);\r\n\r\n        recorder.ondataavailable = (e) => {\r\n          setAudioChunk((prev) => [...prev, e.data]);\r\n        };\r\n\r\n        recorder.onstop = async () => {\r\n          const audioBlob = new Blob(audioChunk, { type: \"audio/wav\" });\r\n          setFile(audioBlob);\r\n\r\n          handleSendMessage(audioBlob);\r\n          setAudioChunk([]);\r\n        };\r\n\r\n        recorder.start();\r\n        setIsRecording(true);\r\n      } catch (e) {\r\n        console.error(\"Error starting audio recording:\", e);\r\n      }\r\n    } else {\r\n      mediaRecorder.stop();\r\n      setIsRecording(false);\r\n    }\r\n  }\r\n\r\n  const isValidObjectId = (id) => {\r\n    return /^[0-9a-fA-F]{24}$/.test(id);\r\n  };\r\n\r\n  // Handle send message button\r\n  // const handleSendMessage = async () => {\r\n  //   if (!newMessage.trim()) return;\r\n\r\n  //   const messageId = uuidv4();\r\n  //   const messageData = {\r\n  //     _id: messageId,\r\n  //     roomId: [currentUser._id, selectedUser._id].sort().join(\"-\"),\r\n  //     senderId: currentUser._id,\r\n  //     receiverId: selectedUser._id,\r\n  //     content: newMessage,\r\n  //   };\r\n\r\n  //   try {\r\n  //     setMessages((prevMessages) => [...prevMessages, messageData]); // Optimistic update\r\n  //     setNewMessage(\"\");\r\n\r\n  //     socket.emit(\"send-message\", messageData);\r\n\r\n  //     const accessToken = localStorage.getItem(\"accessToken\");\r\n  //     const response = await api.post(\"/api/messages/\", messageData, {\r\n  //       headers: {\r\n  //         Authorization: `Bearer ${accessToken}`,\r\n  //       },\r\n  //     });\r\n\r\n  //     // Update message with actual ID from server response\r\n  //     setMessages((prevMessages) =>\r\n  //       prevMessages.map((msg) =>\r\n  //         msg._id === Date.now() ? { ...msg, _id: response.data._id } : msg\r\n  //       )\r\n  //     );\r\n  //   } catch (error) {\r\n  //     console.error(\"Error while sending message:\", error);\r\n  //   }\r\n  // };\r\n\r\n  const handleSendMessage = async (fileToSend = file) => {\r\n    if (!newMessage.trim() && !fileToSend) return;\r\n\r\n    // Validate receiverId\r\n    if (!selectedUser?._id || !isValidObjectId(selectedUser._id)) {\r\n      setError(\"Invalid receiver ID. Please select a valid user.\");\r\n      return;\r\n    }\r\n\r\n    const messageId = uuidv4();\r\n\r\n    // Determine messageType based on whether a file is being sent\r\n    let messageType = \"text\"; // Default to text message\r\n    if (fileToSend && fileToSend instanceof File) {\r\n      if (fileToSend.type.startsWith(\"audio\")) {\r\n        messageType = \"audio\";\r\n      } else if (fileToSend.type.startsWith(\"video\")) {\r\n        messageType = \"video\";\r\n      } else if (fileToSend.type.startsWith(\"image\")) {\r\n        messageType = \"photo\";\r\n      } else {\r\n        messageType = \"file\";\r\n      }\r\n    }\r\n\r\n    const messageData = {\r\n      _id: messageId,\r\n      roomId: [currentUser._id, selectedUser._id].sort().join(\"-\"),\r\n      senderId: currentUser._id,\r\n      receiverId: selectedUser._id,\r\n      content: newMessage.trim(),\r\n      messageType,\r\n      fileUrl: fileToSend && fileToSend instanceof Blob ? URL.createObjectURL(fileToSend) : null, // Temporary URL for preview\r\n      fileName: fileToSend ? fileToSend.name : \"\",\r\n      fileSize: fileToSend ? fileToSend.size : 0,\r\n      fileType: fileToSend ? fileToSend.type : \"\",\r\n      duration: messageType === \"audio\" || messageType === \"video\"\r\n        ? await getMediaDuration(fileToSend)\r\n        : 0, // Calculate duration for audio/video files\r\n      status: \"sent\",\r\n    };\r\n\r\n    console.log(\"Constructed MesssageDate::::::\", messageData);\r\n\r\n    try {\r\n      setIsUploading(true);\r\n      setMessages((prevMessages) => [...prevMessages, messageData]); // Optimistic update\r\n      setNewMessage(\"\");\r\n      setFile(null);\r\n\r\n      socket.emit(\"send-message\", messageData);\r\n\r\n      const accessToken = localStorage.getItem(\"accessToken\");\r\n      const formData = new FormData();\r\n\r\n      // Append only required fields to FormData\r\n      formData.append(\"roomId\", messageData.roomId);\r\n      formData.append(\"senderId\", messageData.senderId);\r\n      formData.append(\"receiverId\", messageData.receiverId); // Explicitly append receiverId\r\n      formData.append(\"content\", messageData.content);\r\n      formData.append(\"messageType\", messageData.messageType);\r\n      formData.append(\"caption\", messageData.caption);\r\n      formData.append(\"status\", messageData.status);\r\n\r\n      if (fileToSend && fileToSend instanceof File) {\r\n        formData.append(\"file\", fileToSend);\r\n        formData.append(\"fileName\", messageData.fileName);\r\n        formData.append(\"fileSize\", messageData.fileSize);\r\n        formData.append(\"fileType\", messageData.fileType);\r\n        if (messageData.duration) formData.append(\"duration\", messageData.duration);\r\n      }\r\n\r\n      // Send message to server\r\n      const response = await api.post(\"/api/messages/\", formData, {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      });\r\n\r\n      // Update message with actual ID from server response\r\n      setMessages((prevMessages) =>\r\n        prevMessages.map((msg) =>\r\n          // msg._id === Date.now() ? { ...msg, _id: response.data._id } : msg\r\n          msg._id === messageId ? { ...msg, _id: response.data._id } : msg\r\n        )\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error while sending message:\", error);\r\n      if (error.response?.status === 401) {\r\n        navigate('/login');\r\n      }\r\n    } finally {\r\n      setIsUploading(false);\r\n    }\r\n  };\r\n\r\n  // Get duration of audio/video files\r\n  const getMediaDuration = (file) => {\r\n    return new Promise((resolve) => {\r\n      const media = document.createElement(file.type.startsWith(\"audio\") ? \"audio\" : \"video\");\r\n      media.src = URL.createObjectURL(file);\r\n      media.onloadedmetadata = () => {\r\n        resolve(media.duration);\r\n      };\r\n    });\r\n  };\r\n\r\n  // Helper function to generate a thumbnail (for photo and video)\r\n  // const generateThumbnail = (file) => {\r\n  //   return new Promise((resolve) => {\r\n  //     if (file.type.startsWith === \"image\") {\r\n  //       resolve(URL.createObjectURL(file)); // Use the image itself as the thumbnail\r\n  //     } else if (file.type.startsWith === \"video\") {\r\n  //       const video = document.createElement(\"video\");\r\n  //       video.src = URL.createObjectURL(file);\r\n  //       video.onloadeddata = () => {\r\n  //         const canvas = document.createElement(\"canvas\");\r\n  //         canvas.width = video.videoWidth;\r\n  //         canvas.height = video.videoHeight;\r\n  //         canvas.getContext(\"2d\").drawImage(video, 0, 0, canvas.width, canvas.height);\r\n  //         resolve(canvas.toDataURL(\"image/jpeg\"));\r\n  //       };\r\n  //     }\r\n  //   });\r\n  // };\r\n\r\n  useEffect(() => {\r\n    if (messages.length) {\r\n      messageEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  }, [messages]);\r\n\r\n  // Helper: check if there's a 30 minute or more gap between two messages\r\n  const shouldDisplayTimeStamp = (currentMessage, previousMessage) => {\r\n    if (!previousMessage) return true;\r\n\r\n    const currentTime = moment(currentMessage.createdAt);\r\n    const previousTime = moment(previousMessage.createdAt);\r\n    return currentTime.diff(previousTime, \"minutes\") >= 30;\r\n  };\r\n\r\n  // Helper: check if a message should start a new group\r\n  const shouldStartNewGroup = (currentMessage, previousMessage) => {\r\n    if (!previousMessage) return true;\r\n\r\n    const currentTime = moment(currentMessage.createdAt);\r\n    const previousTime = moment(previousMessage.createdAt);\r\n\r\n    return (\r\n      currentMessage.senderId !== previousMessage.senderId ||\r\n      currentTime.diff(previousTime, \"minutes\") >= 1\r\n    );\r\n  };\r\n\r\n  if (!selectedUser) {\r\n    return (\r\n      <div className=\"unselected-chat\">Select a user to start chatting!</div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n    \r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatContainer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}