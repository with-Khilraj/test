{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acer\\\\Desktop\\\\D-Documents\\\\The Journey\\\\Learn Node js\\\\mern-project\\\\client\\\\src\\\\component\\\\chatContainer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport api from \"../Api\";\nimport \"../styles/chatContainer.css\";\nimport { getAllChats } from \"./chatStore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:5000\"); // this is basically backend url\n\nconst ChatContainer = ({\n  selectedUser,\n  currentUser\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  useEffect(() => {\n    const accessToken = localStorage.getItem(\"accessToken\");\n    if (selectedUser) {\n      // Join a chat room\n      const roomId = [currentUser._id, selectedUser._id].sort().join(\"-\");\n      socket.emit(\"join-room\", roomId);\n      const fetchChatHistory = async () => {\n        try {\n          const accessToken = localStorage.getItem(\"accessToken\");\n          const response = await api.get(`/api/messages/${selectedUser._id}`, {\n            headers: {\n              Authorization: `Bearer ${accessToken}`\n            }\n          });\n          setMessages(response.data.messages);\n        } catch (error) {\n          console.error(\"Error fetching chat history:\", error);\n        }\n      };\n      fetchChatHistory();\n\n      // listen for new messages\n      socket.on(\"receive-message\", data => {\n        setMessages(prevMessages => [...prevMessages, data]);\n      });\n    }\n  }, [selectedUser]);\n\n  // Handle send message button\n  const handleSendMessage = async () => {\n    if (!newMessage.trim()) return;\n    const messageData = {\n      roomId: [currentUser._id, selectedUser._id].sort().join(\"-\"),\n      senderId: currentUser._id,\n      receiverId: selectedUser._id,\n      content: newMessage\n    };\n    try {\n      // Emit message via socket.io\n      socket.emit(\"send-message\", messageData);\n\n      // save the message to the database\n      const accessToken = localStorage.getItem('accessToken');\n    } catch (error) {}\n\n    // Add the message locally\n    setMessages(prevMessages => [...prevMessages, messageData]);\n    setNewMessage(\"\");\n  };\n  if (!selectedUser) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"unselected-chat\",\n      children: \"Select a user to start chatting!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-avatar\",\n        children: selectedUser.avatar ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: selectedUser.avatar,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: selectedUser.username.charAt(0).toUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"chat-username\",\n        children: selectedUser.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.senderId === currentUser._id ? \"sent\" : \"received\"}`,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatContainer, \"bFuYpZWMfOU2WhBa/CyaGkj6fmk=\");\n_c = ChatContainer;\nexport default ChatContainer;\nvar _c;\n$RefreshReg$(_c, \"ChatContainer\");","map":{"version":3,"names":["React","useEffect","useState","io","api","getAllChats","jsxDEV","_jsxDEV","socket","ChatContainer","selectedUser","currentUser","_s","messages","setMessages","newMessage","setNewMessage","accessToken","localStorage","getItem","roomId","_id","sort","join","emit","fetchChatHistory","response","get","headers","Authorization","data","error","console","on","prevMessages","handleSendMessage","trim","messageData","senderId","receiverId","content","className","children","fileName","_jsxFileName","lineNumber","columnNumber","avatar","src","alt","username","charAt","toUpperCase","map","message","index","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/acer/Desktop/D-Documents/The Journey/Learn Node js/mern-project/client/src/component/chatContainer.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\nimport api from \"../Api\";\r\n\r\nimport \"../styles/chatContainer.css\";\r\nimport { getAllChats } from \"./chatStore\";\r\n\r\nconst socket = io(\"http://localhost:5000\"); // this is basically backend url\r\n\r\nconst ChatContainer = ({ selectedUser, currentUser }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const accessToken = localStorage.getItem(\"accessToken\");\r\n\r\n    if (selectedUser) {\r\n      // Join a chat room\r\n      const roomId = [currentUser._id, selectedUser._id].sort().join(\"-\");\r\n      socket.emit(\"join-room\", roomId);\r\n\r\n      const fetchChatHistory = async () => {\r\n        try {\r\n          const accessToken = localStorage.getItem(\"accessToken\");\r\n          const response = await api.get(`/api/messages/${selectedUser._id}`, {\r\n            headers: {\r\n              Authorization: `Bearer ${accessToken}`,\r\n            },\r\n          });\r\n          setMessages(response.data.messages);\r\n        } catch (error) {\r\n          console.error(\"Error fetching chat history:\", error);\r\n        }\r\n      };\r\n      fetchChatHistory();\r\n\r\n      // listen for new messages\r\n      socket.on(\"receive-message\", (data) => {\r\n        setMessages((prevMessages) => [...prevMessages, data]);\r\n      });\r\n    }\r\n  }, [selectedUser]);\r\n\r\n  // Handle send message button\r\n  const handleSendMessage = async () => {\r\n    if (!newMessage.trim()) return;\r\n\r\n    const messageData = {\r\n      roomId: [currentUser._id, selectedUser._id].sort().join(\"-\"),\r\n      senderId: currentUser._id,\r\n      receiverId: selectedUser._id,\r\n      content: newMessage,\r\n    };\r\n\r\n    try {\r\n      // Emit message via socket.io\r\n      socket.emit(\"send-message\", messageData);\r\n\r\n      // save the message to the database\r\n      const accessToken = localStorage.getItem('accessToken');\r\n    } catch (error) {}\r\n\r\n    // Add the message locally\r\n    setMessages((prevMessages) => [...prevMessages, messageData]);\r\n    setNewMessage(\"\");\r\n  };\r\n\r\n  if (!selectedUser) {\r\n    return (\r\n      <div className=\"unselected-chat\">Select a user to start chatting!</div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"chat-header\">\r\n        <div className=\"chat-avatar\">\r\n          {selectedUser.avatar ? (\r\n            <img src={selectedUser.avatar} alt=\"\" />\r\n          ) : (\r\n            <span>{selectedUser.username.charAt(0).toUpperCase()}</span>\r\n          )}\r\n        </div>\r\n        <h3 className=\"chat-username\">{selectedUser.username}</h3>\r\n      </div>\r\n\r\n      <div className=\"chat-messages\">\r\n        {messages.map((message, index) => (\r\n          <div\r\n            key={index}\r\n            className={`message ${\r\n              message.senderId === currentUser._id ? \"sent\" : \"received\"\r\n            }`}\r\n          >\r\n            <p>{message.content}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* message input */}\r\n      <div className=\"chat-input\">\r\n        <input\r\n          type=\"text\"\r\n          value={newMessage}\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n        />\r\n        <button onClick={handleSendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatContainer;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,EAAE,QAAQ,kBAAkB;AACrC,OAAOC,GAAG,MAAM,QAAQ;AAExB,OAAO,6BAA6B;AACpC,SAASC,WAAW,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,MAAM,GAAGL,EAAE,CAAC,uBAAuB,CAAC,CAAC,CAAC;;AAE5C,MAAMM,aAAa,GAAGA,CAAC;EAAEC,YAAY;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EACvD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACd,MAAMgB,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IAEvD,IAAIT,YAAY,EAAE;MAChB;MACA,MAAMU,MAAM,GAAG,CAACT,WAAW,CAACU,GAAG,EAAEX,YAAY,CAACW,GAAG,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;MACnEf,MAAM,CAACgB,IAAI,CAAC,WAAW,EAAEJ,MAAM,CAAC;MAEhC,MAAMK,gBAAgB,GAAG,MAAAA,CAAA,KAAY;QACnC,IAAI;UACF,MAAMR,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;UACvD,MAAMO,QAAQ,GAAG,MAAMtB,GAAG,CAACuB,GAAG,CAAC,iBAAiBjB,YAAY,CAACW,GAAG,EAAE,EAAE;YAClEO,OAAO,EAAE;cACPC,aAAa,EAAE,UAAUZ,WAAW;YACtC;UACF,CAAC,CAAC;UACFH,WAAW,CAACY,QAAQ,CAACI,IAAI,CAACjB,QAAQ,CAAC;QACrC,CAAC,CAAC,OAAOkB,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACtD;MACF,CAAC;MACDN,gBAAgB,CAAC,CAAC;;MAElB;MACAjB,MAAM,CAACyB,EAAE,CAAC,iBAAiB,EAAGH,IAAI,IAAK;QACrChB,WAAW,CAAEoB,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEJ,IAAI,CAAC,CAAC;MACxD,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACpB,YAAY,CAAC,CAAC;;EAElB;EACA,MAAMyB,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI,CAACpB,UAAU,CAACqB,IAAI,CAAC,CAAC,EAAE;IAExB,MAAMC,WAAW,GAAG;MAClBjB,MAAM,EAAE,CAACT,WAAW,CAACU,GAAG,EAAEX,YAAY,CAACW,GAAG,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;MAC5De,QAAQ,EAAE3B,WAAW,CAACU,GAAG;MACzBkB,UAAU,EAAE7B,YAAY,CAACW,GAAG;MAC5BmB,OAAO,EAAEzB;IACX,CAAC;IAED,IAAI;MACF;MACAP,MAAM,CAACgB,IAAI,CAAC,cAAc,EAAEa,WAAW,CAAC;;MAExC;MACA,MAAMpB,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACzD,CAAC,CAAC,OAAOY,KAAK,EAAE,CAAC;;IAEjB;IACAjB,WAAW,CAAEoB,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEG,WAAW,CAAC,CAAC;IAC7DrB,aAAa,CAAC,EAAE,CAAC;EACnB,CAAC;EAED,IAAI,CAACN,YAAY,EAAE;IACjB,oBACEH,OAAA;MAAKkC,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAAC;IAAgC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAE3E;EAEA,oBACEvC,OAAA;IAAKkC,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BnC,OAAA;MAAKkC,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1BnC,OAAA;QAAKkC,SAAS,EAAC,aAAa;QAAAC,QAAA,EACzBhC,YAAY,CAACqC,MAAM,gBAClBxC,OAAA;UAAKyC,GAAG,EAAEtC,YAAY,CAACqC,MAAO;UAACE,GAAG,EAAC;QAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,gBAExCvC,OAAA;UAAAmC,QAAA,EAAOhC,YAAY,CAACwC,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC;QAAC;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO;MAC5D;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eACNvC,OAAA;QAAIkC,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAEhC,YAAY,CAACwC;MAAQ;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvD,CAAC,eAENvC,OAAA;MAAKkC,SAAS,EAAC,eAAe;MAAAC,QAAA,EAC3B7B,QAAQ,CAACwC,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC3BhD,OAAA;QAEEkC,SAAS,EAAE,WACTa,OAAO,CAAChB,QAAQ,KAAK3B,WAAW,CAACU,GAAG,GAAG,MAAM,GAAG,UAAU,EACzD;QAAAqB,QAAA,eAEHnC,OAAA;UAAAmC,QAAA,EAAIY,OAAO,CAACd;QAAO;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC,GALnBS,KAAK;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMP,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAGNvC,OAAA;MAAKkC,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzBnC,OAAA;QACEiD,IAAI,EAAC,MAAM;QACXC,KAAK,EAAE1C,UAAW;QAClB2C,QAAQ,EAAGC,CAAC,IAAK3C,aAAa,CAAC2C,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC/CI,WAAW,EAAC;MAAsB;QAAAlB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC,eACFvC,OAAA;QAAQuD,OAAO,EAAE3B,iBAAkB;QAAAO,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAClC,EAAA,CAtGIH,aAAa;AAAAsD,EAAA,GAAbtD,aAAa;AAwGnB,eAAeA,aAAa;AAAC,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}