{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acer\\\\Desktop\\\\D-Documents\\\\The Journey\\\\Learn Node js\\\\mern-project\\\\client\\\\src\\\\component\\\\sidebar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo, useCallback } from \"react\";\nimport \"../styles/sidebar.css\";\nimport { fetchUserData, fetchUserExceptCurrent } from \"./userStore\";\nimport api from \"../Api\";\nimport socket from \"./socket\";\nimport { debounce } from \"lodash\";\nimport { useOnlineUsers } from \"../context/onlineUsersContext\";\nimport { toast } from \"react-toastify\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Sidebar = ({\n  onUserSelect,\n  setOnUserSelected\n}) => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [recentMessages, setRecentMessages] = useState({});\n  const [loggedInUser, setLoggedInUser] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const onlineUsers = useOnlineUsers();\n  const navigate = useNavigate();\n\n  // useEffect(() => {\n  //   const accessToken = localStorage.getItem(\"accessToken\");\n\n  //   const getUserData = async () => {\n  //     try {\n  //       const { _id } = await fetchUserData(accessToken);\n  //       setLoggedInUser({ _id });\n  //     } catch (error) {\n  //       console.log(\"Error fetching username:\", error);\n  //     }\n  //   };\n  //   getUserData();\n  // }, []);\n\n  // useEffect(() => {\n  //   const accessToken = localStorage.getItem(\"accessToken\");\n\n  //   const getUserExceptCurrent = async () => {\n  //     try {\n  //       const response = await fetchUserExceptCurrent(accessToken);\n  //       setUsers(response);\n  //     } catch (error) {\n  //       console.log(\"Error fetching user expect current:\", error);\n  //     }\n  //   };\n  //   getUserExceptCurrent();\n  // }, []);\n\n  // useEffect(() => {\n  //   socket.emit('user-online', userId); // notify the server that this user is online\n\n  //   // listen for the active users updates\n  //   socket.on('updateActiveUsers', (activeUsers) => {\n  //     setOnlineUsers(activeUsers);\n  //   });\n\n  //   return () => {\n  //     socket.disconnect();\n  //   }\n  // }, [userId]);\n\n  useEffect(() => {\n    const accessToken = localStorage.getItem(\"accessToken\");\n    const fetchData = async () => {\n      try {\n        const [userData, userList] = await Promise.all([fetchUserData(accessToken), fetchUserExceptCurrent(accessToken)]);\n        setLoggedInUser(userData);\n        setUsers(userList);\n        socket.emit(\"online-user\", userData._id);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // function to update the recent messages\n  const updateRecentMessages = useCallback(newMessages => {\n    setRecentMessages(prevMessages => {\n      const updatedMessages = {\n        ...prevMessages\n      };\n      newMessages.forEach(message => {\n        const senderID = message.senderId.toString();\n        const receiverID = message.userId.toString(); // userId = receiverId\n        const otherUserID = senderID === loggedInUser._id.toString() ? receiverID : senderID;\n        const displayMessage = senderID === loggedInUser._id.toString() ? `You: ${message.message}` : message.message;\n        updatedMessages[otherUserID] = {\n          message: displayMessage,\n          timestamp: new Date(message.lastMessageTimestamp).getTime()\n        };\n        // updatedMessages[message.userId] = displayMessage;\n      });\n      return updatedMessages;\n    });\n  }, [loggedInUser === null || loggedInUser === void 0 ? void 0 : loggedInUser._id]);\n  useEffect(() => {\n    if (loggedInUser) {\n      const fetchRecentMessages = async () => {\n        try {\n          const accessToken = localStorage.getItem(\"accessToken\");\n          const response = await api.get(\"/api/messages/recent-messages\", {\n            headers: {\n              Authorization: `Bearer ${accessToken}`\n            }\n          });\n          updateRecentMessages(response.data.recentMessages);\n        } catch (error) {\n          console.error(`Error fetching recent messages: ${error}`);\n        }\n      };\n      fetchRecentMessages();\n    }\n  }, [loggedInUser, updateRecentMessages]);\n\n  // useEffect for the socket events\n  useEffect(() => {\n    const handleNewMessage = message => {\n      updateRecentMessages([message]);\n    };\n\n    // listen for new messages\n    socket.on(\"new_message\", handleNewMessage);\n\n    // clean up the socket listener whe the component unmounts\n    return () => {\n      socket.off(\"new_message\", handleNewMessage);\n    };\n  }, [updateRecentMessages]);\n\n  // useEffect(() => {\n  //   if (loggedInUser) {\n  //     // Fetch recent messages for each user\n  //     const fetchRecentMessages = async () => {\n  //       try {\n  //         const accessToken = localStorage.getItem(\"accessToken\");\n  //         const response = await api.get(\"/api/messages/recent-messages\", {\n  //           headers: {\n  //             Authorization: `Bearer ${accessToken}`,\n  //           },\n  //         });\n\n  //         console.log(\"API Response:::\", response.data);\n\n  //         // store the recent messages for each user\n  //         const messages = response.data.recentMessages.reduce(\n  //           (acc, message) => {\n  //             // console.log(\"Messages Structure:::\", message);\n  //             const senderID = message.senderId.toString(); // converting objectId into string\n\n  //             const displayMessage =\n  //               senderID === loggedInUser._id.toString()\n  //                 ? `You: ${message.message}`\n  //                 : message.message;\n  //             acc[message.userId] = displayMessage; // store the formatte message content for the user\n  //             return acc;\n  //           },\n  //           {}\n  //         );\n\n  //         setRecentMessages(messages);\n  //       } catch (error) {\n  //         console.error(\"Error fetching recent messages:\", error);\n  //       }\n  //     };\n  //     fetchRecentMessages();\n  //   }\n  // }, [loggedInUser]);\n\n  // Helper: turncate the message content\n\n  const truncateMessage = (content = \"\", maxLength = 25) => {\n    return content.length > maxLength ? `${content.substring(0, maxLength)}...` : content;\n  };\n\n  // Filter users based on the search input\n  const filteredUsers = useMemo(() => {\n    return users.filter(user => user.username.toLowerCase().includes(search.toLowerCase())).sort((a, b) => {\n      var _recentMessages$a$_id, _recentMessages$b$_id;\n      const timeA = ((_recentMessages$a$_id = recentMessages[a._id]) === null || _recentMessages$a$_id === void 0 ? void 0 : _recentMessages$a$_id.timestamp) || 0;\n      const timeB = ((_recentMessages$b$_id = recentMessages[b._id]) === null || _recentMessages$b$_id === void 0 ? void 0 : _recentMessages$b$_id.timestamp) || 0;\n      return timeB - timeA;\n    });\n  }, [users, search, recentMessages]);\n\n  // adding debounce to the search input\n  const debounceSetSearch = useMemo(() => debounce(value => setSearch(value), 300), []);\n  useEffect(() => {\n    return () => {\n      debounceSetSearch.cancel();\n    };\n  }, [debounceSetSearch]);\n\n  //\n  const handleLogout = async () => {\n    try {\n      // await logout();\n      await api.post(\"/api/users/logout\");\n      // Clear all user-related data from local storage\n      localStorage.clear();\n\n      // update the local state\n      setLoggedInUser(null);\n\n      // clear recent messages\n      setRecentMessages({});\n\n      // disconect the socket connection\n      socket.disconnect();\n      toast.success(\"Logout successful!\", {\n        position: \"top-right\",\n        autoClose: 2000\n      });\n\n      // Redirect to the login page immediately\n      navigate(\"/login\");\n    } catch (error) {\n      toast.error(\"Logout failed\", {\n        position: \"top-right\",\n        autoClose: 2000\n      });\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar-menu\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-profile\",\n        children: loggedInUser !== null && loggedInUser !== void 0 && loggedInUser.avatar ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: loggedInUser.avatar,\n          alt: loggedInUser === null || loggedInUser === void 0 ? void 0 : loggedInUser.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: (loggedInUser === null || loggedInUser === void 0 ? void 0 : loggedInUser.username.charAt(0).toUpperCase()) || \"U\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"logout-btn\",\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-container\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search\",\n          className: \"search-input\",\n          value: search,\n          onChange: e => debounceSetSearch(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-list\",\n        children: filteredUsers.length > 0 ? filteredUsers.map(user => {\n          var _recentMessages$user$;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `user-item ${(onUserSelect === null || onUserSelect === void 0 ? void 0 : onUserSelect._id) === user._id ? \"selected\" : \"\"}`,\n            onClick: () => setOnUserSelected(user) // passing selected user\n            ,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-avatar\",\n              children: [user.avatar ? /*#__PURE__*/_jsxDEV(\"img\", {\n                src: user.avatar,\n                alt: user.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                children: user.username.charAt(0).toUpperCase() || \"U\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 21\n              }, this), onlineUsers.includes(user._id) && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"online-indicator\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 299,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"user-name\",\n                children: user.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 303,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"user-message\",\n                children: truncateMessage((_recentMessages$user$ = recentMessages[user._id]) === null || _recentMessages$user$ === void 0 ? void 0 : _recentMessages$user$.message) || \"No messages yet\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 304,\n                columnNumber: 19\n              }, this), recentMessages[user._id] && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"message-timestamp\",\n                children: new Date(recentMessages[user._id].timestamp).toLocaleTimeString([], {\n                  hour: \"2-digit\",\n                  minute: \"2-digit\"\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 17\n            }, this)]\n          }, user._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 15\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"no-users-message\",\n          children: \"No users found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Sidebar, \"wJ2syfxZGgjbBnLWxek174NgOZ0=\", false, function () {\n  return [useOnlineUsers, useNavigate];\n});\n_c = Sidebar;\nexport default Sidebar;\nvar _c;\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","fetchUserData","fetchUserExceptCurrent","api","socket","debounce","useOnlineUsers","toast","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","Sidebar","onUserSelect","setOnUserSelected","_s","users","setUsers","search","setSearch","recentMessages","setRecentMessages","loggedInUser","setLoggedInUser","loading","setLoading","onlineUsers","navigate","accessToken","localStorage","getItem","fetchData","userData","userList","Promise","all","emit","_id","error","console","updateRecentMessages","newMessages","prevMessages","updatedMessages","forEach","message","senderID","senderId","toString","receiverID","userId","otherUserID","displayMessage","timestamp","Date","lastMessageTimestamp","getTime","fetchRecentMessages","response","get","headers","Authorization","data","handleNewMessage","on","off","truncateMessage","content","maxLength","length","substring","filteredUsers","filter","user","username","toLowerCase","includes","sort","a","b","_recentMessages$a$_id","_recentMessages$b$_id","timeA","timeB","debounceSetSearch","value","cancel","handleLogout","post","clear","disconnect","success","position","autoClose","className","children","fileName","_jsxFileName","lineNumber","columnNumber","avatar","src","alt","charAt","toUpperCase","onClick","type","placeholder","onChange","e","target","map","_recentMessages$user$","toLocaleTimeString","hour","minute","_c","$RefreshReg$"],"sources":["C:/Users/acer/Desktop/D-Documents/The Journey/Learn Node js/mern-project/client/src/component/sidebar.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from \"react\";\r\nimport \"../styles/sidebar.css\";\r\nimport { fetchUserData, fetchUserExceptCurrent } from \"./userStore\";\r\nimport api from \"../Api\";\r\nimport socket from \"./socket\";\r\nimport { debounce } from \"lodash\";\r\nimport { useOnlineUsers } from \"../context/onlineUsersContext\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Sidebar = ({ onUserSelect, setOnUserSelected }) => {\r\n  const [users, setUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [recentMessages, setRecentMessages] = useState({});\r\n  const [loggedInUser, setLoggedInUser] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const onlineUsers = useOnlineUsers();\r\n  const navigate = useNavigate();\r\n\r\n  // useEffect(() => {\r\n  //   const accessToken = localStorage.getItem(\"accessToken\");\r\n\r\n  //   const getUserData = async () => {\r\n  //     try {\r\n  //       const { _id } = await fetchUserData(accessToken);\r\n  //       setLoggedInUser({ _id });\r\n  //     } catch (error) {\r\n  //       console.log(\"Error fetching username:\", error);\r\n  //     }\r\n  //   };\r\n  //   getUserData();\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   const accessToken = localStorage.getItem(\"accessToken\");\r\n\r\n  //   const getUserExceptCurrent = async () => {\r\n  //     try {\r\n  //       const response = await fetchUserExceptCurrent(accessToken);\r\n  //       setUsers(response);\r\n  //     } catch (error) {\r\n  //       console.log(\"Error fetching user expect current:\", error);\r\n  //     }\r\n  //   };\r\n  //   getUserExceptCurrent();\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   socket.emit('user-online', userId); // notify the server that this user is online\r\n\r\n  //   // listen for the active users updates\r\n  //   socket.on('updateActiveUsers', (activeUsers) => {\r\n  //     setOnlineUsers(activeUsers);\r\n  //   });\r\n\r\n  //   return () => {\r\n  //     socket.disconnect();\r\n  //   }\r\n  // }, [userId]);\r\n\r\n  useEffect(() => {\r\n    const accessToken = localStorage.getItem(\"accessToken\");\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        const [userData, userList] = await Promise.all([\r\n          fetchUserData(accessToken),\r\n          fetchUserExceptCurrent(accessToken),\r\n        ]);\r\n        setLoggedInUser(userData);\r\n        setUsers(userList);\r\n        socket.emit(\"online-user\", userData._id);\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  // function to update the recent messages\r\n  const updateRecentMessages = useCallback(\r\n    (newMessages) => {\r\n      setRecentMessages((prevMessages) => {\r\n        const updatedMessages = { ...prevMessages };\r\n        newMessages.forEach((message) => {\r\n          const senderID = message.senderId.toString();\r\n          const receiverID = message.userId.toString(); // userId = receiverId\r\n          const otherUserID =\r\n            senderID === loggedInUser._id.toString() ? receiverID : senderID;\r\n          const displayMessage =\r\n            senderID === loggedInUser._id.toString()\r\n              ? `You: ${message.message}`\r\n              : message.message;\r\n          updatedMessages[otherUserID] = {\r\n            message: displayMessage,\r\n            timestamp: new Date(message.lastMessageTimestamp).getTime(),\r\n          };\r\n          // updatedMessages[message.userId] = displayMessage;\r\n        });\r\n        return updatedMessages;\r\n      });\r\n    },\r\n    [loggedInUser?._id]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (loggedInUser) {\r\n      const fetchRecentMessages = async () => {\r\n        try {\r\n          const accessToken = localStorage.getItem(\"accessToken\");\r\n          const response = await api.get(\"/api/messages/recent-messages\", {\r\n            headers: {\r\n              Authorization: `Bearer ${accessToken}`,\r\n            },\r\n          });\r\n\r\n          updateRecentMessages(response.data.recentMessages);\r\n        } catch (error) {\r\n          console.error(`Error fetching recent messages: ${error}`);\r\n        }\r\n      };\r\n      fetchRecentMessages();\r\n    }\r\n  }, [loggedInUser, updateRecentMessages]);\r\n\r\n  // useEffect for the socket events\r\n  useEffect(() => {\r\n    const handleNewMessage = (message) => {\r\n      updateRecentMessages([message]);\r\n    };\r\n\r\n    // listen for new messages\r\n    socket.on(\"new_message\", handleNewMessage);\r\n\r\n    // clean up the socket listener whe the component unmounts\r\n    return () => {\r\n      socket.off(\"new_message\", handleNewMessage);\r\n    };\r\n  }, [updateRecentMessages]);\r\n\r\n  // useEffect(() => {\r\n  //   if (loggedInUser) {\r\n  //     // Fetch recent messages for each user\r\n  //     const fetchRecentMessages = async () => {\r\n  //       try {\r\n  //         const accessToken = localStorage.getItem(\"accessToken\");\r\n  //         const response = await api.get(\"/api/messages/recent-messages\", {\r\n  //           headers: {\r\n  //             Authorization: `Bearer ${accessToken}`,\r\n  //           },\r\n  //         });\r\n\r\n  //         console.log(\"API Response:::\", response.data);\r\n\r\n  //         // store the recent messages for each user\r\n  //         const messages = response.data.recentMessages.reduce(\r\n  //           (acc, message) => {\r\n  //             // console.log(\"Messages Structure:::\", message);\r\n  //             const senderID = message.senderId.toString(); // converting objectId into string\r\n\r\n  //             const displayMessage =\r\n  //               senderID === loggedInUser._id.toString()\r\n  //                 ? `You: ${message.message}`\r\n  //                 : message.message;\r\n  //             acc[message.userId] = displayMessage; // store the formatte message content for the user\r\n  //             return acc;\r\n  //           },\r\n  //           {}\r\n  //         );\r\n\r\n  //         setRecentMessages(messages);\r\n  //       } catch (error) {\r\n  //         console.error(\"Error fetching recent messages:\", error);\r\n  //       }\r\n  //     };\r\n  //     fetchRecentMessages();\r\n  //   }\r\n  // }, [loggedInUser]);\r\n\r\n  // Helper: turncate the message content\r\n\r\n  const truncateMessage = (content = \"\", maxLength = 25) => {\r\n    return content.length > maxLength\r\n      ? `${content.substring(0, maxLength)}...`\r\n      : content;\r\n  };\r\n\r\n  // Filter users based on the search input\r\n  const filteredUsers = useMemo(() => {\r\n    return users\r\n      .filter((user) =>\r\n        user.username.toLowerCase().includes(search.toLowerCase())\r\n      )\r\n      .sort((a, b) => {\r\n        const timeA = recentMessages[a._id]?.timestamp || 0;\r\n        const timeB = recentMessages[b._id]?.timestamp || 0;\r\n        return timeB - timeA;\r\n      });\r\n  }, [users, search, recentMessages]);\r\n\r\n  // adding debounce to the search input\r\n  const debounceSetSearch = useMemo(\r\n    () => debounce((value) => setSearch(value), 300),\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      debounceSetSearch.cancel();\r\n    };\r\n  }, [debounceSetSearch]);\r\n\r\n  //\r\n  const handleLogout = async () => {\r\n    try {\r\n      // await logout();\r\n      await api.post(\"/api/users/logout\");\r\n      // Clear all user-related data from local storage\r\n      localStorage.clear();\r\n\r\n      // update the local state\r\n      setLoggedInUser(null);\r\n\r\n      // clear recent messages\r\n      setRecentMessages({});\r\n\r\n      // disconect the socket connection\r\n      socket.disconnect();\r\n\r\n      toast.success(\"Logout successful!\", {\r\n        position: \"top-right\",\r\n        autoClose: 2000,\r\n      });\r\n\r\n      // Redirect to the login page immediately\r\n      navigate(\"/login\");\r\n    } catch (error) {\r\n      toast.error(\"Logout failed\", {\r\n        position: \"top-right\",\r\n        autoClose: 2000,\r\n      });\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <div className=\"sidebar\">Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"sidebar-menu\">\r\n        <div className=\"user-profile\">\r\n          {/* Display initials or profile image */}\r\n          {loggedInUser?.avatar ? (\r\n            <img src={loggedInUser.avatar} alt={loggedInUser?.username} />\r\n          ) : (\r\n            <span>{loggedInUser?.username.charAt(0).toUpperCase() || \"U\"}</span>\r\n          )}\r\n        </div>\r\n        <button className=\"logout-btn\" onClick={handleLogout}>\r\n          Logout\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"sidebar\">\r\n        {/* Search Bar */}\r\n        <div className=\"search-container\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search\"\r\n            className=\"search-input\"\r\n            value={search}\r\n            onChange={(e) => debounceSetSearch(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        {/* Users List */}\r\n        <div className=\"user-list\">\r\n          {filteredUsers.length > 0 ? (\r\n            filteredUsers.map((user) => (\r\n              <div\r\n                key={user._id}\r\n                className={`user-item ${\r\n                  onUserSelect?._id === user._id ? \"selected\" : \"\"\r\n                }`}\r\n                onClick={() => setOnUserSelected(user)} // passing selected user\r\n              >\r\n                <div className=\"user-avatar\">\r\n                  {/* Display initials or profile image */}\r\n                  {user.avatar ? (\r\n                    <img src={user.avatar} alt={user.username} />\r\n                  ) : (\r\n                    <span>{user.username.charAt(0).toUpperCase() || \"U\"}</span>\r\n                  )}\r\n                  {/* Oline Indicator */}\r\n                  {onlineUsers.includes(user._id) && (\r\n                    <span className=\"online-indicator\"></span>\r\n                  )}\r\n                </div>\r\n                <div className=\"user-info\">\r\n                  <h4 className=\"user-name\">{user.username}</h4>\r\n                  <p className=\"user-message\">\r\n                    {truncateMessage(recentMessages[user._id]?.message) ||\r\n                      \"No messages yet\"}\r\n                  </p>\r\n                  {recentMessages[user._id] && (\r\n                    <span className=\"message-timestamp\">\r\n                      {new Date(\r\n                        recentMessages[user._id].timestamp\r\n                      ).toLocaleTimeString([], {\r\n                        hour: \"2-digit\",\r\n                        minute: \"2-digit\",\r\n                      })}\r\n                    </span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <p className=\"no-users-message\">No users found</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}