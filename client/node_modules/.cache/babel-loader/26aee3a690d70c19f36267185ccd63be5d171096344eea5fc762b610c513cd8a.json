{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acer\\\\Desktop\\\\D-Documents\\\\The Journey\\\\Learn Node js\\\\mern-project\\\\client\\\\src\\\\component\\\\sidebar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport \"../styles/sidebar.css\";\nimport { fetchUserData, fetchUserExceptCurrent } from \"./userStore\";\nimport api from \"../Api\";\nimport socket from \"./socket\";\nimport { debounce } from \"lodash\";\nimport { useOnlineUsers } from \"../context/onlineUsersContext\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Sidebar = ({\n  onUserSelect,\n  setOnUserSelected\n}) => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [recentMessages, setRecentMessages] = useState({});\n  const [loggedInUser, setLoggedInUser] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const onlineUsers = useOnlineUsers();\n\n  // useEffect(() => {\n  //   const accessToken = localStorage.getItem(\"accessToken\");\n\n  //   const getUserData = async () => {\n  //     try {\n  //       const { _id } = await fetchUserData(accessToken);\n  //       setLoggedInUser({ _id });\n  //     } catch (error) {\n  //       console.log(\"Error fetching username:\", error);\n  //     }\n  //   };\n  //   getUserData();\n  // }, []);\n\n  // useEffect(() => {\n  //   const accessToken = localStorage.getItem(\"accessToken\");\n\n  //   const getUserExceptCurrent = async () => {\n  //     try {\n  //       const response = await fetchUserExceptCurrent(accessToken);\n  //       setUsers(response);\n  //     } catch (error) {\n  //       console.log(\"Error fetching user expect current:\", error);\n  //     }\n  //   };\n  //   getUserExceptCurrent();\n  // }, []);\n\n  // useEffect(() => {\n  //   socket.emit('user-online', userId); // notify the server that this user is online\n\n  //   // listen for the active users updates\n  //   socket.on('updateActiveUsers', (activeUsers) => {\n  //     setOnlineUsers(activeUsers);\n  //   });\n\n  //   return () => {\n  //     socket.disconnect();\n  //   }\n  // }, [userId]);\n\n  useEffect(() => {\n    const accessToken = localStorage.getItem(\"accessToken\");\n    const fetchData = async () => {\n      try {\n        const [userData, userList] = await Promise.all([fetchUserData(accessToken), fetchUserExceptCurrent(accessToken)]);\n        setLoggedInUser(userData);\n        setUsers(userList);\n        socket.emit(\"online-user\", userData._id);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // function to update the recent messages\n  const updateRecentMessages = newMessages => {\n    setRecentMessages(prevMessages => {\n      const updateMessages = {\n        ...prevMessages\n      };\n      newMessages.forEach(message => {\n        const senderID = message.senderId.toString();\n        const displayMessage = senderID === loggedInUser._id.toString() ? `You: ${message.message}` : message.message;\n        updateMessages[message.userId] = displayMessage;\n      });\n      return updateMessages;\n    });\n  };\n  useEffect(() => {\n    if (loggedInUser) {\n      const fetchRecentMessages = async () => {\n        try {\n          const accessToken = localStorage.getItem('accessToken');\n          const response = await api.get(\"/api/messages/recent-messages\", {\n            headers: {\n              'Authorization': `Bearer ${accessToken}`\n            }\n          });\n          updateRecentMessages(response.data.recentMessages);\n        } catch (error) {\n          console.error(`Error fetching recent messages: ${error}`);\n        }\n      };\n      fetchRecentMessages();\n\n      // listen for new messages\n      socket.on(\"new_message\", message => {\n        updateRecentMessages([message]);\n      });\n\n      // clean up the socket listener whe the component unmounts\n      return () => {\n        socket.off(\"new_message\");\n      };\n    }\n  }, [loggedInUser]);\n\n  // useEffect(() => {\n  //   if (loggedInUser) {\n  //     // Fetch recent messages for each user\n  //     const fetchRecentMessages = async () => {\n  //       try {\n  //         const accessToken = localStorage.getItem(\"accessToken\");\n  //         const response = await api.get(\"/api/messages/recent-messages\", {\n  //           headers: {\n  //             Authorization: `Bearer ${accessToken}`,\n  //           },\n  //         });\n\n  //         console.log(\"API Response:::\", response.data);\n\n  //         // store the recent messages for each user\n  //         const messages = response.data.recentMessages.reduce(\n  //           (acc, message) => {\n  //             // console.log(\"Messages Structure:::\", message);\n  //             const senderID = message.senderId.toString(); // converting objectId into string\n\n  //             const displayMessage =\n  //               senderID === loggedInUser._id.toString()\n  //                 ? `You: ${message.message}`\n  //                 : message.message;\n  //             acc[message.userId] = displayMessage; // store the formatte message content for the user\n  //             return acc;\n  //           },\n  //           {}\n  //         );\n\n  //         setRecentMessages(messages);\n  //       } catch (error) {\n  //         console.error(\"Error fetching recent messages:\", error);\n  //       }\n  //     };\n  //     fetchRecentMessages();\n  //   }\n  // }, [loggedInUser]);\n\n  // Helper: turncate the message content\n\n  const truncateMessage = (content = \"\", maxLength = 25) => {\n    return content.length > maxLength ? `${content.substring(0, maxLength)}...` : content;\n  };\n\n  // Filter users based on the search input\n  const filteredUsers = useMemo(() => {\n    return users.filter(user => user.username.toLowerCase().includes(search.toLowerCase()));\n  }, [users, search]);\n\n  // adding debounce to the search input\n  const debounceSetSearch = useMemo(() => debounce(value => setSearch(value), 300), []);\n  useEffect(() => {\n    return () => {\n      debounceSetSearch.cancel();\n    };\n  }, [debounceSetSearch]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(Sidebar, \"OqfW7G15l53eHcJpNAYYbH/nfaA=\", false, function () {\n  return [useOnlineUsers];\n});\n_c = Sidebar;\nexport default Sidebar;\nvar _c;\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","fetchUserData","fetchUserExceptCurrent","api","socket","debounce","useOnlineUsers","jsxDEV","_jsxDEV","Fragment","_Fragment","Sidebar","onUserSelect","setOnUserSelected","_s","users","setUsers","search","setSearch","recentMessages","setRecentMessages","loggedInUser","setLoggedInUser","loading","setLoading","onlineUsers","accessToken","localStorage","getItem","fetchData","userData","userList","Promise","all","emit","_id","error","console","updateRecentMessages","newMessages","prevMessages","updateMessages","forEach","message","senderID","senderId","toString","displayMessage","userId","fetchRecentMessages","response","get","headers","data","on","off","truncateMessage","content","maxLength","length","substring","filteredUsers","filter","user","username","toLowerCase","includes","debounceSetSearch","value","cancel","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/acer/Desktop/D-Documents/The Journey/Learn Node js/mern-project/client/src/component/sidebar.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport \"../styles/sidebar.css\";\r\nimport { fetchUserData, fetchUserExceptCurrent } from \"./userStore\";\r\nimport api from \"../Api\";\r\nimport socket from \"./socket\";\r\nimport { debounce } from \"lodash\";\r\nimport { useOnlineUsers } from \"../context/onlineUsersContext\";\r\n\r\nconst Sidebar = ({ onUserSelect, setOnUserSelected }) => {\r\n  const [users, setUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [recentMessages, setRecentMessages] = useState({});\r\n  const [loggedInUser, setLoggedInUser] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const onlineUsers = useOnlineUsers();\r\n\r\n  // useEffect(() => {\r\n  //   const accessToken = localStorage.getItem(\"accessToken\");\r\n\r\n  //   const getUserData = async () => {\r\n  //     try {\r\n  //       const { _id } = await fetchUserData(accessToken);\r\n  //       setLoggedInUser({ _id });\r\n  //     } catch (error) {\r\n  //       console.log(\"Error fetching username:\", error);\r\n  //     }\r\n  //   };\r\n  //   getUserData();\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   const accessToken = localStorage.getItem(\"accessToken\");\r\n\r\n  //   const getUserExceptCurrent = async () => {\r\n  //     try {\r\n  //       const response = await fetchUserExceptCurrent(accessToken);\r\n  //       setUsers(response);\r\n  //     } catch (error) {\r\n  //       console.log(\"Error fetching user expect current:\", error);\r\n  //     }\r\n  //   };\r\n  //   getUserExceptCurrent();\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   socket.emit('user-online', userId); // notify the server that this user is online\r\n\r\n  //   // listen for the active users updates\r\n  //   socket.on('updateActiveUsers', (activeUsers) => {\r\n  //     setOnlineUsers(activeUsers);\r\n  //   });\r\n\r\n  //   return () => {\r\n  //     socket.disconnect();\r\n  //   }\r\n  // }, [userId]);\r\n\r\n  useEffect(() => {\r\n    const accessToken = localStorage.getItem(\"accessToken\");\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        const [userData, userList] = await Promise.all([\r\n          fetchUserData(accessToken),\r\n          fetchUserExceptCurrent(accessToken),\r\n        ]);\r\n        setLoggedInUser(userData);\r\n        setUsers(userList);\r\n        socket.emit(\"online-user\", userData._id);\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  // function to update the recent messages\r\n  const updateRecentMessages = (newMessages) => {\r\n    setRecentMessages((prevMessages) => {\r\n      const updateMessages = { ...prevMessages };\r\n      newMessages.forEach((message) => {\r\n        const senderID = message.senderId.toString();\r\n        const displayMessage =\r\n          senderID === loggedInUser._id.toString()\r\n            ? `You: ${message.message}`\r\n            : message.message;\r\n          updateMessages[message.userId] = displayMessage;\r\n      });\r\n      return updateMessages;\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if(loggedInUser) {\r\n      const fetchRecentMessages = async () => {\r\n        try {\r\n          const accessToken = localStorage.getItem('accessToken');\r\n          const response = await api.get(\"/api/messages/recent-messages\", {\r\n            headers: {\r\n              'Authorization': `Bearer ${accessToken}`,\r\n            }\r\n          });\r\n\r\n          updateRecentMessages(response.data.recentMessages);\r\n        } catch (error) {\r\n          console.error(`Error fetching recent messages: ${error}`)\r\n        }\r\n      };\r\n      fetchRecentMessages();\r\n\r\n      // listen for new messages\r\n      socket.on(\"new_message\", (message) => {\r\n        updateRecentMessages([message]);\r\n      });\r\n\r\n      // clean up the socket listener whe the component unmounts\r\n      return () => {\r\n        socket.off(\"new_message\");\r\n      }\r\n    }\r\n  }, [loggedInUser]);\r\n\r\n  // useEffect(() => {\r\n  //   if (loggedInUser) {\r\n  //     // Fetch recent messages for each user\r\n  //     const fetchRecentMessages = async () => {\r\n  //       try {\r\n  //         const accessToken = localStorage.getItem(\"accessToken\");\r\n  //         const response = await api.get(\"/api/messages/recent-messages\", {\r\n  //           headers: {\r\n  //             Authorization: `Bearer ${accessToken}`,\r\n  //           },\r\n  //         });\r\n\r\n  //         console.log(\"API Response:::\", response.data);\r\n\r\n  //         // store the recent messages for each user\r\n  //         const messages = response.data.recentMessages.reduce(\r\n  //           (acc, message) => {\r\n  //             // console.log(\"Messages Structure:::\", message);\r\n  //             const senderID = message.senderId.toString(); // converting objectId into string\r\n\r\n  //             const displayMessage =\r\n  //               senderID === loggedInUser._id.toString()\r\n  //                 ? `You: ${message.message}`\r\n  //                 : message.message;\r\n  //             acc[message.userId] = displayMessage; // store the formatte message content for the user\r\n  //             return acc;\r\n  //           },\r\n  //           {}\r\n  //         );\r\n\r\n  //         setRecentMessages(messages);\r\n  //       } catch (error) {\r\n  //         console.error(\"Error fetching recent messages:\", error);\r\n  //       }\r\n  //     };\r\n  //     fetchRecentMessages();\r\n  //   }\r\n  // }, [loggedInUser]);\r\n\r\n  // Helper: turncate the message content\r\n  \r\n  \r\n  const truncateMessage = (content = \"\", maxLength = 25) => {\r\n    return content.length > maxLength\r\n      ? `${content.substring(0, maxLength)}...`\r\n      : content;\r\n  };\r\n\r\n  // Filter users based on the search input\r\n  const filteredUsers = useMemo(() => {\r\n    return users.filter((user) =>\r\n      user.username.toLowerCase().includes(search.toLowerCase())\r\n    );\r\n  }, [users, search]);\r\n\r\n  // adding debounce to the search input\r\n  const debounceSetSearch = useMemo(\r\n    () => debounce((value) => setSearch(value), 300),\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      debounceSetSearch.cancel();\r\n    };\r\n  }, [debounceSetSearch]);\r\n\r\n  if (loading) {\r\n    return <div className=\"sidebar\">Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n    \r\n    </>\r\n\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}